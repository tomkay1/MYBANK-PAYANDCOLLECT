package com.mybank.pc.collection.model;

import com.jfinal.kit.Kv;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.SqlPara;
import com.mybank.pc.collection.model.base.BaseUnionpayBatchCollectionBatchno;

/**
 * Generated by JFinal.
 */
public class UnionpayBatchCollectionBatchno extends BaseUnionpayBatchCollectionBatchno<UnionpayBatchCollectionBatchno> {
	private static final long serialVersionUID = 1L;
	public static final UnionpayBatchCollectionBatchno dao = new UnionpayBatchCollectionBatchno().dao();

	public static String getNextBatchNoToString(String txnTime) {
		int nextBatchNo = getNextBatchNo(txnTime);
		return String.format("%04d", nextBatchNo);
	}

	public static int getNextBatchNo(String txnTime) {
		UnionpayBatchCollectionBatchno batchNo = null;
		Kv kv = Kv.create();
		kv.set("txnTime", txnTime);

		batchNo = findBatchNoByTxnTime(kv);
		if (batchNo == null) {
			try {
				batchNo = new UnionpayBatchCollectionBatchno();
				batchNo.setTxnDate(txnTime.substring(0, 8));
				batchNo.setBatchNo(0);
				if (!batchNo.save()) {
					batchNo = findBatchNoByTxnTime(kv);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		if (batchNo == null) {
			throw new RuntimeException("获取批次号失败, [" + txnTime + "]的记录不存在");
		}

		int maxTryCount = 50;
		while (--maxTryCount > 0) {
			int ibatchNo = batchNo.getBatchNo();
			int newBatchNo = ibatchNo + 1;
			kv.set("batchNo", ibatchNo).set("newBatchNo", newBatchNo);
			if (updateBatchNo(kv)) {
				return newBatchNo;
			} else {
				batchNo = findBatchNoByTxnTime(kv);
				if (batchNo == null) {
					throw new RuntimeException("获取批次号失败, [" + txnTime + "]的记录不存在");
				}
			}
		}

		return -1;
	}

	public static boolean decrementBatchNo(String txnTime, String batchNoToString) {
		Kv kv = Kv.create();
		int ibatchNo = Integer.valueOf(batchNoToString);
		kv.set("txnTime", txnTime).set("batchNo", ibatchNo).set("newBatchNo", ibatchNo - 1);
		return updateBatchNo(kv) ? true : decrementBatchNo(txnTime);
	}

	public static boolean decrementBatchNo(String txnTime) {
		UnionpayBatchCollectionBatchno batchNo = null;
		Kv kv = Kv.create();
		kv.set("txnTime", txnTime);
		batchNo = findBatchNoByTxnTime(kv);

		if (batchNo == null) {
			throw new RuntimeException("减少批次号失败, [" + txnTime + "]的记录不存在");
		}

		int maxTryCount = 50;
		while (--maxTryCount > 0) {
			int ibatchNo = batchNo.getBatchNo();
			kv.set("batchNo", ibatchNo).set("newBatchNo", ibatchNo - 1);
			if (updateBatchNo(kv)) {
				return true;
			} else {
				batchNo = findBatchNoByTxnTime(kv);
				if (batchNo == null) {
					throw new RuntimeException("减少批次号失败, [" + txnTime + "]的记录不存在");
				}
			}
		}

		return false;
	}

	private static UnionpayBatchCollectionBatchno findBatchNoByTxnTime(Kv kv) {
		SqlPara sqlPara = Db.getSqlPara("collection_batch.findBatchNo", kv);
		return dao.findFirst(sqlPara);
	}

	private static boolean updateBatchNo(Kv kv) {
		SqlPara sqlPara = Db.getSqlPara("collection_batch.updateBatchNo", kv);
		return Db.update(sqlPara) > 0;
	}
}
