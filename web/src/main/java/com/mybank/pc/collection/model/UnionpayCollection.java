package com.mybank.pc.collection.model;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.jfinal.kit.JsonKit;
import com.jfinal.kit.Kv;
import com.jfinal.kit.LogKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.SqlPara;
import com.mybank.pc.collection.model.base.BaseUnionpayCollection;
import com.mybank.pc.kits.unionpay.acp.AcpService;
import com.mybank.pc.kits.unionpay.acp.SDK;
import com.mybank.pc.kits.unionpay.acp.SDKConfig;
import com.mybank.pc.kits.unionpay.acp.SDKConstants;

/**
 * Generated by JFinal.
 */
public class UnionpayCollection extends BaseUnionpayCollection<UnionpayCollection> {
	private static final long serialVersionUID = 1L;

	public static final UnionpayCollection dao = new UnionpayCollection().dao();

	private Map<String, String> realtimeReqData = null;
	private Map<String, String> realtimeRspData = null;

	public Map<String, String> assemblyRealtimeRequest() {
		Map<String, String> contentData = new HashMap<String, String>();

		SDK sdk = SDK.getByMerId(getMerId());
		SDKConfig sdkConfig = sdk.getSdkConfig();
		AcpService acpService = sdk.getAcpService();

		/*** 银联全渠道系统，产品参数，除了encoding自行选择外其他不需修改 ***/
		// 版本号
		contentData.put("version", sdkConfig.getVersion());
		// 字符集编码 可以使用UTF-8,GBK两种方式
		contentData.put("encoding", SDKConstants.UTF_8_ENCODING);
		// 签名方法 目前只支持01-RSA方式证书加密
		contentData.put("signMethod", sdkConfig.getSignMethod());
		// 交易类型
		contentData.put("txnType", getTxnType());
		// 交易子类型
		contentData.put("txnSubType", getTxnSubType());
		// 业务类型
		contentData.put("bizType", getBizType());
		// 渠道类型
		contentData.put("channelType", getChannelType());

		/*** 商户接入参数 ***/
		// 商户号码
		contentData.put("merId", getMerId());
		// 接入类型，商户接入固定填0，不需修改
		contentData.put("accessType", getAccessType());
		// 商户订单号，8-40位数字字母，不能含“-”或“_”，可以自行定制规则
		contentData.put("orderId", getOrderId());
		// 订单发送时间，格式为YYYYMMDDhhmmss，必须取当前时间，否则会报txnTime无效
		contentData.put("txnTime", getTxnTime());
		// 交易币种（境内商户一般是156人民币）
		contentData.put("currencyCode", getCurrencyCode());
		// 交易金额，单位分，不要带小数点
		contentData.put("txnAmt", getTxnAmt());
		// 账号类型
		contentData.put("accType", getAccType());

		///////// 不对敏感信息加密使用：
		// contentData.put("accNo",accNo); //这里测试的时候使用的是测试卡号，正式环境请使用真实卡号
		////////

		////////// 如果商户号开通了 商户对敏感信息加密的权限那么，需要对
		////////// 卡号accNo，pin和phoneNo，cvn2，expired加密（如果这些上送的话），对敏感信息加密使用：
		contentData.put("encryptCertId", acpService.getEncryptCertId());
		String accNoEnc = acpService.encryptData(getAccNo(), SDKConstants.UTF_8_ENCODING);
		contentData.put("accNo", accNoEnc);
		//////////

		// 后台通知地址（需设置为【外网】能访问 http
		// https均可），支付成功后银联会自动将异步通知报文post到商户上送的该地址，失败的交易银联不会发送后台通知
		// 后台通知参数详见open.unionpay.com帮助中心 下载 产品接口规范 代收产品接口规范 代收交易 商户通知
		// 注意:1.需设置为外网能访问，否则收不到通知 2.http https均可
		// 3.收单后台通知后需要10秒内返回http200或302状态码
		// 4.如果银联通知服务器发送通知后10秒内未收到返回状态码或者应答码非http200，那么银联会间隔一段时间再次发送。总共发送5次，每次的间隔时间为0,1,2,4分钟。
		// 5.后台通知地址如果上送了带有？的参数，例如：http://abc/web?a=b&c=d
		// 在后台通知处理程序验证签名之前需要编写逻辑将这些字段去掉再验签，否则将会验签失败
		contentData.put("backUrl", sdkConfig.getBackUrl());

		this.setReq(JsonKit.toJson(contentData));
		// 请求方保留域，
		// 透传字段，查询、通知、对账文件中均会原样出现，如有需要请启用并修改自己希望透传的数据。
		// 出现部分特殊字符时可能影响解析，请按下面建议的方式填写：
		// 1. 如果能确定内容不会出现&={}[]"'等符号时，可以直接填写数据，建议的方法如下。
		// contentData.put("reqReserved", "透传信息1|透传信息2|透传信息3");
		// 2. 内容可能出现&={}[]"'符号时：
		// 1) 如果需要对账文件里能显示，可将字符替换成全角＆＝｛｝【】“‘字符（自己写代码，此处不演示）；
		// 2) 如果对账文件没有显示要求，可做一下base64（如下）。
		// 注意控制数据长度，实际传输的数据长度不能超过1024位。
		// 查询、通知等接口解析时使用new String(Base64.decodeBase64(reqReserved),
		// DemoBase.encoding);解base64后再对数据做后续解析。
		// contentData.put("reqReserved",
		// Base64.encodeBase64String("任意格式的信息都可以".toString().getBytes(DemoBase.encoding)));
		realtimeReqData = acpService.sign(contentData, SDKConstants.UTF_8_ENCODING);
		return realtimeReqData;
	}

	public Map<String, String> sendRealtimeOrder() throws Exception {
		SDK sdk = SDK.getByMerId(getMerId());
		SDKConfig sdkConfig = sdk.getSdkConfig();
		AcpService acpService = sdk.getAcpService();

		// 交易请求url从配置文件读取对应属性文件acp_sdk.properties中的acpsdk.backTransUrl
		String requestBackUrl = sdkConfig.getBackRequestUrl();
		// 发送请求报文并接受同步应答（默认连接超时时间30秒，读取返回结果超时时间30秒）;
		// 这里调用signData之后，调用submitUrl之前不能对submitFromData中的键值对做任何修改，如果修改会导致验签不通过
		if (realtimeReqData == null) {
			assemblyRealtimeRequest();
		}
		realtimeRspData = acpService.post(realtimeReqData, requestBackUrl, SDKConstants.UTF_8_ENCODING);
		this.setResp(JsonKit.toJson(realtimeRspData));
		return realtimeRspData;
	}

	public boolean validateRealtimeResp() {
		SDK sdk = SDK.getByMerId(getMerId());
		AcpService acpService = sdk.getAcpService();

		boolean isEmpty = realtimeRspData.isEmpty();
		boolean isValidate = acpService.validate(realtimeRspData, SDKConstants.UTF_8_ENCODING);

		// 未返回正确的http状态
		if (isEmpty) {
			LogKit.error("未获取到返回报文或返回http状态码非200");
			throw new RuntimeException("未获取到返回报文或返回http状态码非200");
		}
		if (isValidate) {
			LogKit.info("验证签名成功");
		} else {
			LogKit.error("验证签名失败");
			throw new RuntimeException("验证签名失败");
		}
		return isValidate;
	}

	public static int updateToBeSentUnionpayCollectionBatchNo(Kv kv) {
		SqlPara sqlPara = Db.getSqlPara("collection_batch.updateToBeSentUnionpayCollectionBatchNo", kv);
		return Db.update(sqlPara);
	}

	public static List<UnionpayCollection> findToBeSentUnionpayCollectionByBatchNo(Kv kv) {
		SqlPara sqlPara = Db.getSqlPara("collection_batch.findToBeSentUnionpayCollectionByBatchNo", kv);
		return UnionpayCollection.dao.find(sqlPara);
	}

	public void resetBatchStatus() {
		setBatchNo("");
		setTxnTime("");
		if ("1".equals(getStatus())) {
			setStatus("0");
		}
	}

	public Map<String, String> getRealtimeReqData() {
		return realtimeReqData;
	}

	public void setRealtimeReqData(Map<String, String> realtimeReqData) {
		this.realtimeReqData = realtimeReqData;
	}

	public Map<String, String> getRealtimeRspData() {
		return realtimeRspData;
	}

	public void setRealtimeRspData(Map<String, String> realtimeRspData) {
		this.realtimeRspData = realtimeRspData;
	}

}
