package com.mybank.pc.advance.model;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.jsoup.helper.StringUtil;

import com.alibaba.fastjson.annotation.JSONField;
import com.jfinal.kit.JsonKit;
import com.jfinal.kit.Kv;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.SqlPara;
import com.mybank.pc.advance.model.base.BaseUnionpayAdvance;
import com.mybank.pc.advance.model.sender.AdvanceRequestBuilder;
import com.mybank.pc.collection.model.sender.SendProxy;
import com.mybank.pc.exception.ValidateUnionpayRespException;
import com.mybank.pc.kits.unionpay.acp.SDK;
import com.mybank.pc.kits.unionpay.acp.SDKConfig;
import com.mybank.pc.kits.unionpay.acp.SDKConstants;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class UnionpayAdvance extends BaseUnionpayAdvance<UnionpayAdvance> {
	public static final UnionpayAdvance dao = new UnionpayAdvance().dao();

	public static final int TIMEOUT_MINUTE = 10;

	private SendProxy sendProxy;

	public void toAdvance() {
		SDK sdk = SDK.getByMerId(getMerId());
		SDKConfig sdkConfig = sdk.getSdkConfig();

		setVersion(sdkConfig.getVersion());
		setEncoding(SDKConstants.UTF_8_ENCODING);

		setTxnType("12");// 交易类型 12：代付
		setTxnSubType("00");// 默认填写00
		setAccType("01");// 账号类型 01：银行卡02：存折03：IC卡帐号类型(卡介质)
		setAccessType("0");// 接入类型，商户接入固定填0，不需修改
		setBizType("000401");// 业务类型 000401：代付
		setChannelType("07");// 渠道类型
		setCurrencyCode("156");// 交易币种（境内商户一般是156 人民币）

		setCertifTp("01");// 证件类型
	}

	public UnionpayAdvance assemblyRequest() {
		this.sendProxy = new AdvanceRequestBuilder(this).build();
		setReq(JsonKit.toJson(sendProxy.getReqData()));
		return this;
	}

	public SendProxy sendOrder() throws Exception {
		if (sendProxy == null) {
			assemblyRequest();
		}
		sendProxy.send();
		this.setResp(JsonKit.toJson(sendProxy.getRspData()));
		return sendProxy;
	}

	@JSONField(serialize = false)
	public Map<String, String> getRspData() {
		return sendProxy == null ? null : sendProxy.getRspData();
	}

	public boolean validateRealtimeResp() throws ValidateUnionpayRespException {
		return sendProxy.validateResp();
	}

	public UnionpayAdvanceQuery buildQuery() {
		return buildQuery(null);
	}

	public UnionpayAdvanceQuery buildQuery(String operID) {
		UnionpayAdvanceQuery query = new UnionpayAdvanceQuery();
		Date now = new Date();
		String reqReserved = "from=pac";

		query.setTxnType("00");
		query.setTxnSubType("00");
		query.setBizType("000401");
		query.setAccessType("0");

		query.setMerId(getMerId());
		query.setOrderId(getOrderId());
		query.setTxnTime(getTxnTime());

		query.setVersion(getVersion());
		query.setEncoding(getEncoding());
		query.setMerchantID(getMerchantID());
		query.setReqReserved(reqReserved);

		query.setCat(now);
		query.setMat(now);
		query.setOperID(operID);

		query.assemblyQueryRequest();
		return query;
	}

	public static boolean isFailCode(String resultCode) {
		return StringUtils.isNotBlank(resultCode)
				&& !("00".equals(resultCode) || "A6".equals(resultCode) || "03".equals(resultCode)
						|| "04".equals(resultCode) || "05".equals(resultCode) || "34".equals(resultCode));
	}

	public static List<UnionpayAdvance> find(Kv kv) {
		SqlPara sqlPara = Db.getSqlPara("advance.findTradeList", kv);
		return UnionpayAdvance.dao.find(sqlPara);
	}

	public static Page<UnionpayAdvance> findPage(int pageNumber, int pageSize, Kv kv) {
		SqlPara sqlPara = Db.getSqlPara("advance.findTradeList", kv);
		return UnionpayAdvance.dao.paginate(pageNumber, pageSize, sqlPara);
	}

	public static UnionpayAdvance findByOrderId(String orderId) {
		if (StringUtil.isBlank(orderId)) {
			return null;
		} else {
			SqlPara sqlPara = Db.getSqlPara("advance.findUnionpayAdvance", Kv.create().set("orderId", orderId));
			return UnionpayAdvance.dao.findFirst(sqlPara);
		}
	}

	@JSONField(serialize = false)
	public SendProxy getSendProxy() {
		return this.sendProxy;
	}
}
